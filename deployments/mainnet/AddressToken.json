{
  "address": "0x1ADD4E55ecEffd795B01d22203D280c93A2F1dc3",
  "abi": [
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "CallReverted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemintForbidden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "magic",
          "type": "bytes16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addressAndSaltForMagic",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "addressForTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "creationCode",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "creationCode",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "cds",
          "type": "bytes[]"
        }
      ],
      "name": "deployAndCalls",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "magic",
          "type": "bytes16"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "magic",
          "type": "bytes16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "mintFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "salts",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ac97e92d7971980b5cb2c87b9963081cce68ddec7d154a380ded2ce5a3a75e7",
  "receipt": {
    "to": null,
    "from": "0x5D715aE4F2750fDF1783FdF95D166805bDF59333",
    "contractAddress": "0x1ADD4E55ecEffd795B01d22203D280c93A2F1dc3",
    "transactionIndex": 116,
    "gasUsed": "3686657",
    "logsBloom": "0x
    "blockHash": "0x6eeae1b6967a4e46b5141ae27996907283f6a0205ee61434710678efe873377f",
    "transactionHash": "0x3ac97e92d7971980b5cb2c87b9963081cce68ddec7d154a380ded2ce5a3a75e7",
    "logs": [],
    "blockNumber": 17415288,
    "cumulativeGasUsed": "18334034",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d958a261b1de33f61c1be17f37ee9fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"CallReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemintForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"magic\",\"type\":\"bytes16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addressAndSaltForMagic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addressForTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"creationCode\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"creationCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"cds\",\"type\":\"bytes[]\"}],\"name\":\"deployAndCalls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"magic\",\"type\":\"bytes16\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"magic\",\"type\":\"bytes16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"salts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AddressToken.sol\":\"AddressToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/AddressToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n                                                           ,\\u2584\\u2593\\u2593\\u2588\\u2588\\u258c   ,\\u2553\\u2584\\u2584\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584,,\\n                                                        ,\\u2593\\u2588\\u2588\\u2593\\u2588\\u2588\\u2588\\u2593\\u2584\\u2593\\u2588\\u2588\\u2588\\u2593\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2593\\u2588\\u2588\\u2588\\u2593\\u2584,\\n                                                  \\u2584\\u2588   \\u2593\\u2588\\u2588\\u256c\\u2563\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u2593\\u2580\\u256c\\u256c\\u2593\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584,\\n                                                 \\u2593\\u2588\\u2588\\u258c \\u2593\\u2588\\u2588\\u256c\\u2563\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u2593\\u258c  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\u2559\\u2559\\u2580\\u207f\\n                                                \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u2593\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2588\\u2568 \\u2584 \\u255f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u256c\\u256c\\u256c\\u256c\\u256c\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2584\\n                                  \\u2514\\u2580\\u2593\\u2593\\u2584\\u2553        \\u255f\\u2588\\u2593\\u2563\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580 \\u2553\\u2588\\u258c \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2593\\u2588\\u2588\\u2593\\u2584\\n                                     \\u2514\\u2580\\u2588\\u2588\\u2588\\u2588\\u2593\\u2584\\u2565  \\u2590\\u2588\\u2588\\u256c\\u256c\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2559 \\u00c6\\u2580\\u2500 \\u2593\\u2588\\u2588\\u2588\\u2580\\u255a\\u2560\\u256c\\u2569\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2588\\u2588\\u2584\\n                                        \\u2514\\u2580\\u2588\\u2588\\u2593\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u256c\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580     \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2592\\u2560\\\"      \\u2514\\u2559\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2588\\u2588\\u2584\\n                                           \\u2514\\u2580\\u2588\\u2588\\u2584,\\u2514\\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u258c\\u2514\\u2559    ^\\\"\\u2580\\u2559\\u2559\\u2559\\\"\\u2559\\u2588\\u2588      @\\u2584    \\u2559\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2588\\u2588\\u00b5\\n                                              \\u2514\\u2580\\u2588\\u2588\\u2593\\u2584, \\u2588\\u2588\\u258c       \\u2552       \\u2559\\u2588\\u2593     ]\\u2593\\u2588\\u2593\\u2554    \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u256c\\u256c\\u256c\\u256c\\u256c\\u2593\\u2588\\u258c\\n                                                  \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588       \\u2593         \\u255f\\u2588\\u258c    ]\\u2560\\u2588\\u2588\\u2593\\u2591\\u2592\\u2553   \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u256c\\u256c\\u2563\\u2588\\u258c\\n                                                  \\u2590\\u2588\\u2588\\u2588\\u2588      \\u2553\\u2588\\u2580\\u2588\\u258c      ,\\u2588\\u2588\\u258c    \\u255a\\u00c5\\u2588\\u2588\\u2588\\u2593\\u2592\\u2592\\u2560\\u2553  \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u256c\\u2563\\u2588\\u258c\\n                                                  \\u2514\\u2588\\u2588\\u2588\\u2588     \\u2593\\u2588\\u2591\\u2591\\u2593\\u2588      \\u2580\\u2580\\u2580    \\u03c6\\u2592\\u256b\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2560\\u2553  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u256c\\u256c\\u2593\\u2588\\u00b5\\n                                                   \\u2558\\u2588\\u2588\\u2588\\u00b5 \\u258c\\u2584\\u2588\\u2593\\u2584\\u2593\\u2580`     ,\\u2580    ,\\u2554\\u2560\\u2591\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\u2560\\u2592\\u2592\\u2592\\u03c6  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u2588\\u2588\\n                                                   \\u2590\\u2588\\u2588\\u2588\\u2588\\u00b5\\u2559\\u2593\\u2580`     ,\\u2580\\u2559,\\u2554\\u2554\\u03c6\\u03c6\\u03c6\\u2560\\u2591\\u2584\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\u2591\\u2593\\u2559\\u2592\\u2592\\u2592\\u2560 \\u2514\\u2588\\u2588\\u256c\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u2593\\u2588\\u2310\\n                                                   \\u256b\\u2588\\u2588 \\u2593\\u258c         \\u258c\\u03c6\\u2592\\u2592\\u2591\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\u2592\\u2591\\u2593\\u255a\\u2592\\u2592\\u2592\\u2560 \\u2593\\u2588\\u2588\\u256c\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2563\\u2588\\u258c\\n                                                   \\u2588\\u2588\\u258c           \\u258c\\u2554\\u2592\\u2592\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2592\\u2591\\u258c\\u2560\\u2592\\u2592\\u2592\\u2265\\u2590\\u2588\\u2588\\u2593\\u256c\\u256c\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n                                                   \\u2588\\u2588\\u258c      ,\\u2553\\u03c6\\u2560\\u2593\\u00ab\\u2592\\u2592\\u2593\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\u2592\\u2592\\u2592\\u255f\\u2591\\u2592\\u2592\\u2592\\u2592\\u2590\\u2588\\u2588\\u2588\\u256c\\u256c\\u2563\\u2588\\u2588\\u2588\\u2588\\u2593\\u2588\\u258c\\n                                                  \\u2590\\u2588\\u2588      \\u2560\\u2592\\u2584\\u2593\\u2593\\u2588\\u2588\\u2588\\u2593\\u2588\\u2588\\u2588\\u2588\\u2514     \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\u2592\\u2592\\u2591\\u258c\\u255a\\u2592\\u2592\\u2592\\u2590\\u2588\\u2588\\u2588\\u2593\\u256c\\u256c\\u2588\\u2588\\u2588\\u2588 \\u2559\\u258c\\n                                                  \\u2588\\u2588\\u2588  )  \\u2560\\u2592\\u2591\\u2591\\u2591\\u2592\\u2591\\u256c\\u2588\\u2588\\u2588\\u2588\\u2580        \\u2514\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2592\\u2592\\u2591\\u256c\\u2229\\u2592\\u2592\\u2593\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u2563\\u2588\\u2588\\u2588\\n                                                 \\u2593\\u2588\\u2588    \\u2560\\u2560\\u2592\\u2592\\u2590\\u2588\\u2580\\u2580\\u258c`\\u2591\\u256b\\u2588\\u2588           \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2592\\u2592\\u00bd\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u2563\\u2588\\u2588\\u2588\\n                                                \\u2588\\u2588\\u2588 ,\\u2588\\u2584 \\u2560\\u2592\\u2592\\u2592\\u256b\\u258c,\\u2584\\u2580,\\u2592\\u256b\\u2588\\u2588           \\u255f\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2592\\u2591\\u2563\\u2320\\u2592\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u2563\\u2588\\u2588\\u258c\\n                                               \\u2558\\u2588\\u2588\\u00b5 \\u2588\\u2588` \\u2560\\u2592\\u2592\\u2591\\u2588\\u2588\\u256c\\u03c6\\u2560\\u2584\\u2593\\u2588\\u2588`            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u258c\\u03c6\\u2560\\u2591\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u256c\\u256c\\u2593\\u2588\\u2588\\n                                                \\u255f\\u2588\\u2588  .\\u03c6\\u2560\\u2592\\u2591\\u2584\\u2588\\u2580\\u2591\\u2591\\u2584\\u2588\\u2588\\u2580\\u2514              \\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\u2592\\u2563\\u03c6\\u2592\\u2591\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u256c\\u2563\\u2588\\u2588\\n                                                 \\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2553\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580                \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2593\\u03c6\\u2592\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u256c\\u2563\\u2588\\u2588\\n                                                   \\u2559\\u2580\\u2580\\u2580\\u2588\\u2588\\u2580\\u2514                      \\u2588\\u2588\\u2588\\u2588\\u2593\\u2584\\u2580\\u03c6\\u2584\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u256c\\u2593\\u2588\\u2580\\n                                                                                \\u2593\\u2588\\u2588\\u2588\\u256c\\u2569\\u2554\\u2563\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2588\\u2588\\u2514\\n                                                                              \\u2553\\u2588\\u2588\\u2588\\u2588\\u2580\\u2584\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2588\\u2588\\u2588\\u2588\\u2580\\n                                                                            ,\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2500]\\u2588\\u2588\\u2559\\n                                                                         ,\\u2584\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2514  \\u2559\\n                                                                    ,\\u2553\\u2584\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2559\\n                                                             `\\\"\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580`\\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2514\\n                                                                              \\u2514\\u2514\\n\\n                                                        11\\\\   11\\\\                     11\\\\\\n                                                      1111 |  \\\\__|                    11 |\\n                                                      \\\\_11 |  11\\\\ 1111111\\\\   1111111\\\\ 1111111\\\\\\n                                                        11 |  11 |11  __11\\\\ 11  _____|11  __11\\\\\\n                                                        11 |  11 |11 |  11 |11 /      11 |  11 |\\n                                                        11 |  11 |11 |  11 |11 |      11 |  11 |\\n                                                      111111\\\\ 11 |11 |  11 |\\\\1111111\\\\ 11 |  11 |\\n                                                      \\\\______|\\\\__|\\\\__|  \\\\__| \\\\_______|\\\\__|  \\\\__|\\n\\n\\n                         111111\\\\        11\\\\       11\\\\                                               11\\\\   11\\\\ 11111111\\\\ 11111111\\\\\\n                        11  __11\\\\       11 |      11 |                                              111\\\\  11 |11  _____|\\\\__11  __|\\n                        11 /  11 | 1111111 | 1111111 | 111111\\\\   111111\\\\   1111111\\\\  1111111\\\\       1111\\\\ 11 |11 |         11 |\\n                        11111111 |11  __11 |11  __11 |11  __11\\\\ 11  __11\\\\ 11  _____|11  _____|      11 11\\\\11 |11111\\\\       11 |\\n                        11  __11 |11 /  11 |11 /  11 |11 |  \\\\__|11111111 |\\\\111111\\\\  \\\\111111\\\\        11 \\\\1111 |11  __|      11 |\\n                        11 |  11 |11 |  11 |11 |  11 |11 |      11   ____| \\\\____11\\\\  \\\\____11\\\\       11 |\\\\111 |11 |         11 |\\n                        11 |  11 |\\\\1111111 |\\\\1111111 |11 |      \\\\1111111\\\\ 1111111  |1111111  |      11 | \\\\11 |11 |         11 |\\n                        \\\\__|  \\\\__| \\\\_______| \\\\_______|\\\\__|       \\\\_______|\\\\_______/ \\\\_______/       \\\\__|  \\\\__|\\\\__|         \\\\__|\\n*/\\n\\npragma solidity 0.8.20;\\n\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { CREATE3 } from \\\"solmate/src/utils/CREATE3.sol\\\";\\n\\ncontract AddressToken is ERC721(\\\"1inch Address NFT\\\", \\\"1ANFT\\\") {\\n    error AccessDenied();\\n    error RemintForbidden();\\n    error CallReverted(uint256, bytes);\\n\\n    bytes32 private constant _LOW_128_BIT_MASK = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\n\\n    mapping(address /* tokenId */ => bytes32 /* salt */) public salts;\\n\\n    function addressForTokenId(uint256 tokenId) external pure returns(address) {\\n        return address(uint160(tokenId));\\n    }\\n\\n    function tokenURI(uint256 tokenId) public pure override returns(string memory) {\\n        return string.concat(\\\"data:application/json;base64,\\\", Base64.encode(bytes(tokenJSON(tokenId))));\\n    }\\n\\n    function tokenJSON(uint256 tokenId) public pure returns(string memory) {\\n        bytes memory accountHex = bytes(Strings.toHexString(tokenId, 20));\\n        bytes memory accountMask = new bytes(42);\\n        bytes memory attributes = bytes.concat(\\n            _detectRepetitions(accountHex, accountMask),\\n            _detectLongestPalindrome(accountHex, accountMask),\\n            _detectWords(accountHex),\\n            _detectZeroBytes(accountHex),\\n            _detectSymbols(accountHex),\\n            _detectAlphabets(accountHex)\\n        );\\n\\n        // Cut out last ',\\\\n':\\n        // attributes.length -= 2;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(attributes, sub(mload(attributes), 2))\\n        }\\n\\n        _checksumAddress(accountHex);\\n\\n        bytes memory json = bytes.concat('{\\\\n',\\n            '\\\\t\\\"name\\\": \\\"Deploy to ', accountHex, '\\\",\\\\n',\\n            '\\\\t\\\"description\\\": \\\"Enables holder to deploy arbitrary smart contract to ', accountHex, '\\\",\\\\n',\\n            '\\\\t\\\"external_url\\\": \\\"https://etherscan.io/address/', accountHex, '\\\",\\\\n',\\n            '\\\\t\\\"image\\\": \\\"ipfs://QmZW3TTdtK87ktxmh6PG5UumbtoWXU8rVBApo65oknekmc\\\",\\\\n',\\n            '\\\\t\\\"animation_url\\\": \\\"ipfs://QmZKp3K7oyDFPkVUXUgDKqZ6RcLZY7QW267JvXRTLW1qaG\\\",\\\\n',\\n            '\\\\t\\\"attributes\\\": [\\\\n',\\n                attributes, bytes(attributes.length > 0 ? '\\\\n' : ''),\\n            '\\\\t]\\\\n',\\n        '}');\\n\\n        return string(json);\\n    }\\n\\n    function _detectRepetitions(bytes memory accountHex, bytes memory accountMask) private pure returns(bytes memory attributes) {\\n        uint256 length = 1;\\n        bytes1 letter = accountHex[2];\\n        for (uint256 i = 3; i < 42; i++) {\\n            if (accountHex[i] == letter) {\\n                length++;\\n            }\\n\\n            if (accountHex[i] != letter || i == 41) {\\n                if (length >= 4) {\\n                    if (length + 2 == i) {\\n                        attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Repeated prefix ', letter, '\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(length)), '\\\\n\\\\t\\\\t},\\\\n');\\n                    } else if (i == 41) {\\n                        attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Repeated suffix ', letter, '\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(length)), '\\\\n\\\\t\\\\t},\\\\n');\\n                    }\\n                    attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Repeated symbol ', letter, '\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(length)), '\\\\n\\\\t\\\\t},\\\\n');\\n\\n                    for (uint256 t = 0; t < length; t++) {\\n                        accountMask[i + (accountHex[i] != letter ? 0 : 1) - length + t] = bytes1(uint8(length - t));\\n                    }\\n                }\\n                length = 1;\\n                letter = accountHex[i];\\n            }\\n        }\\n    }\\n\\n    function _detectLongestPalindrome(bytes memory accountHex, bytes memory accountMask) private pure returns(bytes memory attributes) {\\n        for (uint256 length = 40; length >= 5 && attributes.length == 0; length--) {\\n            attributes = _palindromPalindromOfLength(accountHex, accountMask, length);\\n        }\\n    }\\n\\n    function _palindromPalindromOfLength(bytes memory accountHex, bytes memory accountMask, uint256 length) private pure returns(bytes memory attributes) {\\n        for (uint256 i = 2; i <= 42 - length; i++) {\\n            if (uint8(accountMask[i]) >= length) {\\n                continue;\\n            }\\n            uint256 matched = 0;\\n            for (uint256 j = 0; j < length >> 1 && accountHex[i + j] == accountHex[i + length - 1 - j]; j++) {\\n                matched++;\\n            }\\n\\n            if (matched == length >> 1) {\\n                if (i == 2) {\\n                    attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Palindrome prefix\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(length)), '\\\\n\\\\t\\\\t},\\\\n');\\n                } else if (i + length == 42) {\\n                    attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Palindrome suffix\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(length)), '\\\\n\\\\t\\\\t},\\\\n');\\n                }\\n                attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Palindrome\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(length)), '\\\\n\\\\t\\\\t},\\\\n');\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _detectWords(bytes memory accountHex) private pure returns(bytes memory attributes) {\\n        string[19] memory words = [\\n            'dead', 'beef', 'c0ffee', 'def1',\\n            '1ee7', '1337', 'babe', 'f00d',\\n            'dec0de', 'facade', 'decade', 'feed',\\n            'face', 'c0de', 'c0c0a', 'caca0',\\n            'cafe', '5eed', '5e1f'\\n        ];\\n        for (uint256 i = 0; i < words.length; i++) {\\n            attributes = bytes.concat(attributes, _detectSingleWord(accountHex, bytes(words[i])));\\n        }\\n    }\\n\\n    function _detectSingleWord(bytes memory accountHex, bytes memory word) private pure returns(bytes memory attributes) {\\n        uint256 count = 0;\\n        for (uint256 i = 2; i <= 42 - word.length; i++) {\\n            uint256 matched = 0;\\n            for (uint256 j = 0; j < word.length && accountHex[i + j] == word[j]; j++) {\\n                matched++;\\n            }\\n\\n            if (matched == word.length) {\\n                if (i == 2) {\\n                    attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Word prefix\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": \\\"', word, '\\\"\\\\n\\\\t\\\\t},\\\\n');\\n                } else if (i + word.length == 42) {\\n                    attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Word suffix\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": \\\"', word, '\\\"\\\\n\\\\t\\\\t},\\\\n');\\n                }\\n                count++;\\n                i += word.length - 1;\\n            }\\n        }\\n\\n        if (count > 0) {\\n            attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Word ', word, '\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(count)), '\\\\n\\\\t\\\\t},\\\\n');\\n        }\\n    }\\n\\n    function _detectZeroBytes(bytes memory accountHex) private pure returns(bytes memory attributes) {\\n        uint256 count = 0;\\n        for (uint256 i = 2; i < 42; i += 2) {\\n            if (accountHex[i] == '0' && accountHex[i + 1] == '0') {\\n                count++;\\n            }\\n        }\\n        return bytes.concat('\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Zero bytes\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(count)), '\\\\n\\\\t\\\\t},\\\\n');\\n    }\\n\\n    function _detectSymbols(bytes memory accountHex) private pure returns(bytes memory attributes) {\\n        bytes memory counters = new bytes(256);\\n        for (uint256 i = 2; i < 42; i++) {\\n            counters[uint8(accountHex[i])] = bytes1(uint8(counters[uint8(accountHex[i])]) + 1);\\n        }\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n        for (uint256 i = 0; i < alphabet.length; i++) {\\n            uint256 count = uint8(counters[uint8(alphabet[i])]);\\n            attributes = bytes.concat(attributes, '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Symbol ', alphabet[i], '\\\",\\\\n\\\\t\\\\t\\\\t\\\"value\\\": ', bytes(Strings.toString(count)), '\\\\n\\\\t\\\\t},\\\\n');\\n        }\\n    }\\n\\n    function _detectAlphabets(bytes memory accountHex) private pure returns(bytes memory attributes) {\\n        bool onlyDigits = true;\\n        bool onlyLetters = true;\\n        for (uint256 i = 2; i < 42; i++) {\\n            if (accountHex[i] < '0' || accountHex[i] > '9') {\\n                onlyDigits = false;\\n            }\\n            if (accountHex[i] < 'a' || accountHex[i] > 'f') {\\n                onlyLetters = false;\\n            }\\n        }\\n\\n        if (onlyDigits) {\\n            attributes = '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Digits only\\\"\\\\n\\\\t\\\\t},\\\\n';\\n        } else if (onlyLetters) {\\n            attributes = '\\\\t\\\\t{\\\\n\\\\t\\\\t\\\\t\\\"trait_type\\\": \\\"Letters only\\\"\\\\n\\\\t\\\\t},\\\\n';\\n        }\\n    }\\n\\n    function _checksumAddress(bytes memory hexAddress) private pure {\\n        bytes32 hash;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            hash := keccak256(add(hexAddress, 0x22), sub(mload(hexAddress), 2))\\n        }\\n        for (uint256 i = 2; i < 42; i++) {\\n            uint256 hashByte = uint8(hash[(i - 2) >> 1]);\\n            if (((i & 1 == 0) ? (hashByte >> 4) : (hashByte & 0x0f)) > 7 && hexAddress[i] > '9') {\\n                hexAddress[i] = bytes1(uint8(hexAddress[i]) - 0x20);\\n            }\\n        }\\n    }\\n\\n    function addressAndSaltForMagic(bytes16 magic, address account) public view returns(address tokenId, bytes32 salt) {\\n        bytes32 hashedAccount = keccak256(abi.encodePacked(account));\\n        salt = (_LOW_128_BIT_MASK & hashedAccount) | bytes32(magic);\\n        tokenId = CREATE3.getDeployed(salt);\\n    }\\n\\n    function mint(bytes16 magic) external returns(address tokenId) {\\n        return mintFor(magic, msg.sender);\\n    }\\n\\n    function mintFor(bytes16 magic, address account) public returns(address tokenId) {\\n        bytes32 salt;\\n        (tokenId, salt) = addressAndSaltForMagic(magic, account);\\n        if (salts[tokenId] != 0) revert RemintForbidden();\\n        salts[tokenId] = salt;\\n        _mint(account, uint160(tokenId));\\n    }\\n\\n    function deploy(address tokenId, bytes calldata creationCode) public payable returns(address deployed) {\\n        if (msg.sender != ownerOf(uint160(tokenId))) revert AccessDenied();\\n        _burn(uint160(tokenId));\\n        deployed = CREATE3.deploy(salts[tokenId], creationCode, msg.value);\\n    }\\n\\n    function deployAndCalls(address tokenId, bytes calldata creationCode, bytes[] calldata cds) external payable returns(address deployed) {\\n        deployed = deploy(tokenId, creationCode);\\n        for (uint256 i = 0; i < cds.length; i++) {\\n            (bool success, bytes memory reason) = deployed.call(cds[i]);  // solhint-disable-line avoid-low-level-calls\\n            if (!success) revert CallReverted(i, reason);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x936ce0a3f3e9ca01a24796e1a761b4bcd2d1b3c8d169b4ef9795810cc69eb503\",\"license\":\"MIT\"},\"solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0xe709c9f2c6fb8bfe1158fa31967c0a2109844c52079fe4e327baec82fb87acb6\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/CREATE3.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {Bytes32AddressLib} from \\\"./Bytes32AddressLib.sol\\\";\\n\\n/// @notice Deploy to deterministic addresses without an initcode factor.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/CREATE3.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol)\\nlibrary CREATE3 {\\n    using Bytes32AddressLib for bytes32;\\n\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\\n    // 0x52       |  0x52                 | MSTORE           |                        //\\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\\n    // 0xf3       |  0xf3                 | RETURN           |                        //\\n    //--------------------------------------------------------------------------------//\\n    bytes internal constant PROXY_BYTECODE = hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n\\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\\n\\n    function deploy(\\n        bytes32 salt,\\n        bytes memory creationCode,\\n        uint256 value\\n    ) internal returns (address deployed) {\\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\\n\\n        address proxy;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\\n        }\\n        require(proxy != address(0), \\\"DEPLOYMENT_FAILED\\\");\\n\\n        deployed = getDeployed(salt);\\n        (bool success, ) = proxy.call{value: value}(creationCode);\\n        require(success && deployed.code.length != 0, \\\"INITIALIZATION_FAILED\\\");\\n    }\\n\\n    function getDeployed(bytes32 salt) internal view returns (address) {\\n        address proxy = keccak256(\\n            abi.encodePacked(\\n                // Prefix:\\n                bytes1(0xFF),\\n                // Creator:\\n                address(this),\\n                // Salt:\\n                salt,\\n                // Bytecode hash:\\n                PROXY_BYTECODE_HASH\\n            )\\n        ).fromLast20Bytes();\\n\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\\n                    // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\\n                    hex\\\"d6_94\\\",\\n                    proxy,\\n                    hex\\\"01\\\" // Nonce of the proxy contract (1)\\n                )\\n            ).fromLast20Bytes();\\n    }\\n}\\n\",\"keccak256\":\"0x1d4ea6d2353ed117d7704ddf7488fcd39edb2d575351f6c64efd313170d74367\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060409080825260049081361015610016575f80fd5b5f90813560e01c90816301ffc9a714610e785750806306fdde0314610d8f578063081812fc14610d3b578063095ea7b314610b3b5780630a9169721461099e578063193cd0a01461093257806323b872dd1461090857806342842e0e146108df5780636352211e1461088b57806370a082311461079d5780638f7bb1791461074a57806395d89b41146105df578063a22cb465146104b1578063a43b278014610450578063acc8f306146103f5578063b23e448014610393578063b88d4fde1461030d578063c87b56dd1461025c578063e97fac05146101d9578063e985e9c51461015c5763f9298d5114610109575f80fd5b346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159575073ffffffffffffffffffffffffffffffffffffffff602092519135168152f35b80fd5b5082346101d557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d55760ff8160209361019a610fca565b6101a2610ff1565b73ffffffffffffffffffffffffffffffffffffffff91821683526005875283832091168252855220549151911615158152f35b5080fd5b509190817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102585761020d610fca565b926024359067ffffffffffffffff8211610159575060209361024a73ffffffffffffffffffffffffffffffffffffffff9361025093369101611014565b91613db8565b915191168152f35b8280fd5b508290346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015957506102a461029f6103099335611ad7565b611920565b906102f7603d825180947f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000060208301526102e78151809260208686019101610f66565b810103601d810185520183611152565b51918291602083526020830190610f87565b0390f35b5090346101d55760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d557610346610fca565b61034e610ff1565b9060643567ffffffffffffffff811161038f573660238201121561038f5761038c93816024610382933693013591016111cd565b916044359161137b565b80f35b8480fd5b5082346101d55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d5578060209273ffffffffffffffffffffffffffffffffffffffff6103e5610fca565b1681526006845220549051908152f35b5082346101d55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d55760209073ffffffffffffffffffffffffffffffffffffffff610250610449611042565b3390613bb2565b5082346101d557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d55760209073ffffffffffffffffffffffffffffffffffffffff6102506104a3611042565b6104ab610ff1565b90613bb2565b50913461025857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610258576104e9610fca565b906024359182151580930361038f5773ffffffffffffffffffffffffffffffffffffffff1692833314610583575033845260056020528084208385526020528084207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b5082903461015957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159578151918160019283549384811c91818616958615610740575b6020968785108114610714578899509688969785829a5291825f146106cf575050600114610674575b5050506103099291610665910385611152565b51928284938452830190610f87565b91908693508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106106b75750505082010181610665610309610652565b8054848a01860152889550879490930192810161069e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168782015293151560051b8601909301935084925061066591506103099050610652565b60248360228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b92607f1692610629565b508290346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159575061078a6103099235611ad7565b9051918291602083526020830190610f87565b5090346101d55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d55773ffffffffffffffffffffffffffffffffffffffff6107eb610fca565b169081156108085760208480858581526003845220549051908152f35b60849060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152fd5b508290346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159575073ffffffffffffffffffffffffffffffffffffffff61025060209335611268565b5082346101d55761038c906108f336611071565b91925192610900846110d1565b85845261137b565b50346101595761038c61091a36611071565b9161092d610928843361142b565b6112f0565b61152d565b83823461015957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159575061097c61096e611042565b610976610ff1565b90613b2f565b73ffffffffffffffffffffffffffffffffffffffff8351921682526020820152f35b509060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d5576109d2610fca565b60249167ffffffffffffffff8335818111610b33576109f49036908401611014565b959091604492833597828911610b37573660238a011215610b3757888601359183831161038f57600597368a858b1b8d010111610b335790610a399291989398613db8565b9783917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbd82360301925b888110610a8a5760208b73ffffffffffffffffffffffffffffffffffffffff8e5191168152f35b8981831b8401013584811215610b2f5783018a81013590868211610b2b5788018136038113610b2b578c828f8a949385948592519384928337810182815203925af1610ad46116b0565b9015610ae95750610ae490613988565b610a63565b610b278991898f8e81519687967f3b4c7a5f000000000000000000000000000000000000000000000000000000008852870152850152830190610f87565b0390fd5b8780fd5b8680fd5b8580fd5b8380fd5b5091903461025857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025857610b74610fca565b906024359273ffffffffffffffffffffffffffffffffffffffff918280610b9a87611268565b16941693808514610cb857803314908115610c99575b5015610c17578486526020528420827fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055610bef83611268565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b90508652600560205281862033875260205260ff82872054165f610bb0565b50602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152fd5b508290346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159575073ffffffffffffffffffffffffffffffffffffffff61025060209335611298565b5082903461015957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595781519181825492600184811c91818616958615610e6e575b6020968785108114610714578899509688969785829a5291825f146106cf575050600114610e13575050506103099291610665910385611152565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410610e565750505082010181610665610309610652565b8054848a018601528895508794909301928101610e3d565b92607f1692610dd8565b905082346102585760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025857357fffffffff00000000000000000000000000000000000000000000000000000000811680910361025857602092507f80ac58cd000000000000000000000000000000000000000000000000000000008114908115610f3c575b8115610f12575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610f0b565b7f5b5e139f0000000000000000000000000000000000000000000000000000000081149150610f04565b5f5b838110610f775750505f910152565b8181015183820152602001610f68565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610fc381518092818752878088019101610f66565b0116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610fed57565b5f80fd5b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610fed57565b9181601f84011215610fed5782359167ffffffffffffffff8311610fed5760208381860195010111610fed57565b600435907fffffffffffffffffffffffffffffffff0000000000000000000000000000000082168203610fed57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6060910112610fed5773ffffffffffffffffffffffffffffffffffffffff906004358281168103610fed57916024359081168103610fed579060443590565b6020810190811067ffffffffffffffff8211176110ed57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6060810190811067ffffffffffffffff8211176110ed57604052565b6040810190811067ffffffffffffffff8211176110ed57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176110ed57604052565b67ffffffffffffffff81116110ed57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9291926111d982611193565b916111e76040519384611152565b829481845281830111610fed578281602093845f960137010152565b1561120a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152fd5b5f52600260205273ffffffffffffffffffffffffffffffffffffffff60405f205416611295811515611203565b90565b6112cb6112c6825f52600260205273ffffffffffffffffffffffffffffffffffffffff60405f205416151590565b611203565b5f52600460205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b156112f757565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152fd5b9061139f93929161138f610928843361142b565b61139a83838361152d565b6116df565b156113a657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b9073ffffffffffffffffffffffffffffffffffffffff808061144c84611268565b1693169183831493841561147f575b508315611469575b50505090565b61147591929350611298565b16145f8080611463565b9093505f52600560205260405f20825f5260205260ff60405f205416925f61145b565b156114a957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152fd5b906115629161153b84611268565b9173ffffffffffffffffffffffffffffffffffffffff9384938480941694859116146114a2565b1691821561162d578161157f9161157886611268565b16146114a2565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f8481526004602052604081207fffffffffffffffffffffffff0000000000000000000000000000000000000000908181541690558382526003602052604082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b3d156116da573d906116c182611193565b916116cf6040519384611152565b82523d5f602084013e565b606090565b919290803b1561188e576117569160209160405180809581947f150b7a0200000000000000000000000000000000000000000000000000000000998a845233600485015273ffffffffffffffffffffffffffffffffffffffff809a1660248501526044840152608060648401526084830190610f87565b03915f968791165af19082908261182e575b5050611808576117766116b0565b80519081611803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000161490565b909192506020813d8211611886575b8161184a60209383611152565b810103126101d55751907fffffffff00000000000000000000000000000000000000000000000000000000821682036101595750905f80611768565b3d915061183d565b50505050600190565b919082018092116118a457565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b906118db82611193565b6118e86040519182611152565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06119168294611193565b0190602036910137565b805115611ac4576040516119338161111a565b604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f604082015281516002928382018092116118a45760038092047f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811681036118a4576119cd908594951b6118d1565b936020850193829183518401925b838110611a735750505050510680600114611a24576002146119fb575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff603d91015390565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe81603d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81940153015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518782015301959291906119db565b50604051611ad1816110d1565b5f815290565b9060405191611ae58361111a565b602a83526040366020850137825115612bb15760306020840153825160011015612bb1576078602184015360295b600181116138d1575061387357604051611b2c8161111a565b602a815260403660208301376060916001845160021015612bb1577fff000000000000000000000000000000000000000000000000000000000000006022869593950151169060035b602a8110613368575050506060906028915b60058310158061335f575b15611ef557506060906002935b602a848103116118a45783602a038511611ee85783611bbe868361394c565b5160f81c1015611ede575f91825b8560011c841080611e37575b15611bf557611be9611bef91613988565b93613988565b92611bcc565b9092509490948460011c14611c1357611c0d90613988565b93611b9f565b611d856055611d8b939794868460027f0a09097d2c0a000000000000000000000000000000000000000000000000000096145f14611d945750605c8592611c5c611cec936139c2565b6040519482611c75879451809260208088019101610f66565b83017f09097b0a0909092274726169745f74797065223a202250616c696e64726f6d6560208201527f20707265666978222c0a0909092276616c7565223a20000000000000000000006040820152825190611cd98260569560208785019101610f66565b019182015203603c810184520182611152565b611cf5876139c2565b6040519482611d0e879451809260208088019101610f66565b83017f09097b0a0909092274726169745f74797065223a202250616c696e64726f6d6560208201527f222c0a0909092276616c7565223a2000000000000000000000000000000000006040820152825190611d7282604f9560208785019101610f66565b0191820152036035810184520182611152565b9261395d565b91939093611b87565b602a91611da091611897565b03611cec57611e32605c8592611db58a6139c2565b6040519482611dce879451809260208088019101610f66565b83017f09097b0a0909092274726169745f74797065223a202250616c696e64726f6d6560208201527f20737566666978222c0a0909092276616c7565223a20000000000000000000006040820152825190611cd98260569560208785019101610f66565b611cec565b507fff00000000000000000000000000000000000000000000000000000000000000611e6c611e66868a611897565b8b61394c565b5116611e788789611897565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116118a457611ed6611ed0877fff00000000000000000000000000000000000000000000000000000000000000936139b5565b8c61394c565b511614611bd8565b93611c0d90613988565b93509390611d8b90611d85565b949392509050606091604051610260810181811067ffffffffffffffff8211176110ed5780604052611f2681611136565b600481527f64656164000000000000000000000000000000000000000000000000000000006102808301528152604051611f5f81611136565b600481527f626565660000000000000000000000000000000000000000000000000000000060208201526020820152604051611f9a81611136565b600681527f633066666565000000000000000000000000000000000000000000000000000060208201526040820152604051611fd581611136565b600481527f646566310000000000000000000000000000000000000000000000000000000060208201528482015260405161200f81611136565b600481527f31656537000000000000000000000000000000000000000000000000000000006020820152608082015260405161204a81611136565b600481527f3133333700000000000000000000000000000000000000000000000000000000602082015260a082015260405161208581611136565b600481527f6261626500000000000000000000000000000000000000000000000000000000602082015260c08201526040516120c081611136565b600481527f6630306400000000000000000000000000000000000000000000000000000000602082015260e08201526040516120fb81611136565b600681527f6465633064650000000000000000000000000000000000000000000000000000602082015261010082015260405161213781611136565b600681527f6661636164650000000000000000000000000000000000000000000000000000602082015261012082015260405161217381611136565b600681527f646563616465000000000000000000000000000000000000000000000000000060208201526101408201526040516121af81611136565b600481527f666565640000000000000000000000000000000000000000000000000000000060208201526101608201526040516121eb81611136565b600481527f6661636500000000000000000000000000000000000000000000000000000000602082015261018082015260405161222781611136565b600481527f633064650000000000000000000000000000000000000000000000000000000060208201526101a082015260405161226381611136565b600581527f633063306100000000000000000000000000000000000000000000000000000060208201526101c082015260405161229f81611136565b600581527f636163613000000000000000000000000000000000000000000000000000000060208201526101e08201526040516122db81611136565b600481527f6361666500000000000000000000000000000000000000000000000000000000602082015261020082015260405161231781611136565b600481527f3565656400000000000000000000000000000000000000000000000000000000602082015261022082015260405161235381611136565b600481527f356531660000000000000000000000000000000000000000000000000000000060208201526102408201525f905b60138210612f425750505f60025b602a8110612e3d57506123a6906139c2565b93612447605560405180977f09097b0a0909092274726169745f74797065223a20225a65726f20627974657360208301527f222c0a0909092276616c7565223a2000000000000000000000000000000000006040830152612411815180926020604f86019101610f66565b81017f0a09097d2c0a0000000000000000000000000000000000000000000000000000604f820152036035810188520186611152565b606095604051938461012081011067ffffffffffffffff610120870111176110ed576101208501604052610100855261010036602087013760025b602a8110612dc757506040519561249887611136565b601087527f303132333435363738396162636465660000000000000000000000000000000060208801525f985b87518a10156125f057876125e460536125ea9361252d7fff000000000000000000000000000000000000000000000000000000000000008f808e61251c61250f612525948b61394c565b519160f892831c9061394c565b51901c9761394c565b5116946139c2565b7f0a09097d2c0a00000000000000000000000000000000000000000000000000006040519583612567889551809260208089019101610f66565b8401907f09097b0a0909092274726169745f74797065223a202253796d626f6c200000006020830152603d8201527f222c0a0909092276616c7565223a200000000000000000000000000000000000603e8201528251906125d182604d9560208785019101610f66565b0191820152036033810184520182611152565b99613988565b986124c5565b93979296509397509350606060018060025b602a8110612c4957509160209593916127009795935f14612bde57505060405161262b8161111a565b602881527f09097b0a0909092274726169745f74797065223a2022446967697473206f6e6c868201527f79220a09097d2c0a0000000000000000000000000000000000000000000000006040820152925b60405197856126948a975180928a808b019101610f66565b86016126a8825180938a8085019101610f66565b016126bb82518093898085019101610f66565b016126ce82518093888085019101610f66565b016126e182518093878085019101610f66565b016126f482518093868085019101610f66565b01038084520182611152565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe80825101825280835101602284012060025b602a8110612a98575050506101577f095d0a00000000000000000000000000000000000000000000000000000000009282611295935115155f905f14612a83575060405161278081611136565b600181527f0a000000000000000000000000000000000000000000000000000000000000006020820152905b6040519586927f7b0a00000000000000000000000000000000000000000000000000000000000060208501527f09226e616d65223a20224465706c6f7920746f2000000000000000000000000060228501528451612811816036870160208901610f66565b8401947f222c0a0000000000000000000000000000000000000000000000000000000000958660368201527f09226465736372697074696f6e223a2022456e61626c657320686f6c6465722060398201527f746f206465706c6f792061726269747261727920736d61727420636f6e74726160598201527f637420746f20000000000000000000000000000000000000000000000000000060798201528151906128c282607f830160208601610f66565b0186607f8201527f092265787465726e616c5f75726c223a202268747470733a2f2f65746865727360828201527f63616e2e696f2f616464726573732f000000000000000000000000000000000060a282015261292982518093602060b185019101610f66565b01948060b18701527f0922696d616765223a2022697066733a2f2f516d5a5733545464744b38376b7460b48701527f786d683650473555756d62746f5758553872564241706f36356f6b6e656b6d6360d487015260f48601527f0922616e696d6174696f6e5f75726c223a2022697066733a2f2f516d5a4b703360f78601527f4b376f794446506b5655585567444b715a3652634c5a593751573236374a7658610117860152610137947f52544c5731716147222c0a000000000000000000000000000000000000000000868201527f092261747472696275746573223a205b0a000000000000000000000000000000610142820152835190612a36826101539660208885019101610f66565b01612a4a8251809360208785019101610f66565b01918201527f7d000000000000000000000000000000000000000000000000000000000000006101568201520390810184520182611152565b60405190612a90826110d1565b8152906127ac565b8281018181116118a45760011c6020811015612bb157826007911a60018316155f14612ba95760041c5b1180612b54575b612adc575b612ad790613988565b612733565b612ae6818661394c565b51907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060f892831c019160ff83116118a457612ad7927fff00000000000000000000000000000000000000000000000000000000000000911b165f1a612b4c828861394c565b539050612ace565b507f39000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612ba1838861394c565b511611612ac9565b600f16612ac2565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9390931561267c579250604051612bf48161111a565b602981527f09097b0a0909092274726169745f74797065223a20224c657474657273206f6e868201527f6c79220a09097d2c0a000000000000000000000000000000000000000000000060408201529261267c565b7f30000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612c95838d61394c565b5116108015612d72575b612d6a575b7f61000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612cf0838d61394c565b5116108015612d15575b612d0d575b612d0890613988565b612602565b5f9250612cff565b507f66000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612d62838d61394c565b511611612cfa565b5f9150612ca4565b507f39000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612dbf838d61394c565b511611612c9f565b6001612de0612dd6838761394c565b5160f81c8861394c565b5160f81c019060ff82116118a457612e3891612e327fff00000000000000000000000000000000000000000000000000000000000000612e20848961394c565b5160f81c9260f81b165f1a918961394c565b53613988565b612482565b7f30000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612e89838961394c565b51161480612ee0575b612ed0575b6002810180911115612394577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b90612eda90613988565b90612e97565b506001810181116118a4577f30000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612f3a600184018961394c565b511614612e92565b9181600597959492971b830151936060925f946002975b8751602a03602a81116118a4578911613232575f92835b895185108c868d836131c3575b50505015612f9d57612f91612f9791613988565b94613988565b93612f70565b9093509890939491988851809114612fc3575b50612fba90613988565b97909392612f59565b600282989792145f146130f457507f220a09097d2c0a0000000000000000000000000000000000000000000000000061308c6058613092938b6040519482613015879451809260208088019101610f66565b83017f09097b0a0909092274726169745f74797065223a2022576f726420707265666960208201527f78222c0a0909092276616c7565223a202200000000000000000000000000000060408201528251906130798260519560208785019101610f66565b0191820152036038810184520182611152565b95613988565b958751807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101116118a457612fba917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6130ee920190611897565b90612fb0565b613103602a9189989398611897565b14613112575b61309290613988565b947f220a09097d2c0a000000000000000000000000000000000000000000000000006131bb6058613092938b6040519482613157879451809260208088019101610f66565b83017f09097b0a0909092274726169745f74797065223a2022576f726420737566666960208201527f78222c0a0909092276616c7565223a202200000000000000000000000000000060408201528251906130798260519560208785019101610f66565b959050613109565b7fff0000000000000000000000000000000000000000000000000000000000000093506131fa92916131f491611897565b9061394c565b51167fff00000000000000000000000000000000000000000000000000000000000000613227878d61394c565b5116148c868d612f7d565b9997509391909561327893958061327e575b50506020612f919160405193816132648693518092868087019101610f66565b82016126f482518093868085019101610f66565b90612386565b6133586050612f9194956020947f0a09097d2c0a00000000000000000000000000000000000000000000000000006132d67f222c0a0909092276616c7565223a200000000000000000000000000000000000966139c2565b9160405196846132ef89965180928c808a019101610f66565b85017f09097b0a0909092274726169745f74797065223a2022576f72642000000000008a82015282519061332b82603b958d8785019101610f66565b019182015282519061334582604a958b8785019101610f66565b0191820152036030810184520182611152565b9291613244565b50805115611b92565b7fff00000000000000000000000000000000000000000000000000000000000000613396828998969861394c565b51167fff00000000000000000000000000000000000000000000000000000000000000841614613863575b7fff0000000000000000000000000000000000000000000000000000000000000083167fff0000000000000000000000000000000000000000000000000000000000000061340f838a61394c565b511614801590613859575b613430575b61342890613988565b949294611b75565b919060048082101561347a575b50505060016134287fff00000000000000000000000000000000000000000000000000000000000000613470848961394c565b511692905061341f565b600282939792019081841161382d5750605c7f0a09097d2c0a0000000000000000000000000000000000000000000000000000928561366993145f1461374557613595827fff00000000000000000000000000000000000000000000000000000000000000926134e9886139c2565b878d604051968461350489965180926020808a019101610f66565b8501917f09097b0a0909092274726169745f74797065223a20225265706561746564207060208401527f726566697820000000000000000000000000000000000000000000000000000060408401521660468201527f222c0a0909092276616c7565223a2000000000000000000000000000000000006047820152825190611cd98260569560208785019101610f66565b61359e856139c2565b60405194826135b7879451809260208088019101610f66565b83017f09097b0a0909092274726169745f74797065223a20225265706561746564207360208201527f796d626f6c20000000000000000000000000000000000000000000000000000060408201527fff000000000000000000000000000000000000000000000000000000000000008c1660468201527f222c0a0909092276616c7565223a2000000000000000000000000000000000006047820152825190611cd98260569560208785019101610f66565b945f5b8281101561343d57807fff000000000000000000000000000000000000000000000000000000000000006136a361372993866139b5565b60f81b167fff0000000000000000000000000000000000000000000000000000000000000084167fff000000000000000000000000000000000000000000000000000000000000006136f5888d61394c565b51161461372e57612e3261371f8361371a8861371560ff5f5b168c611897565b6139b5565b611897565b915f1a918961394c565b61366c565b612e3261371f8361371a8861371560ff600161370e565b6029860361359557613828827fff000000000000000000000000000000000000000000000000000000000000009261377c886139c2565b878d604051968461379789965180926020808a019101610f66565b8501917f09097b0a0909092274726169745f74797065223a20225265706561746564207360208401527f756666697820000000000000000000000000000000000000000000000000000060408401521660468201527f222c0a0909092276616c7565223a2000000000000000000000000000000000006047820152825190611cd98260569560208785019101610f66565b613595565b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b506029811461341a565b9061386d90613988565b906133c1565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811690601082101561391f577f303132333435363738396162636465660000000000000000000000000000000061391a921a613910848761394c565b5360041c9161395d565b611b13565b60245f7f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b908151811015612bb1570160200190565b80156118a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146118a45760010190565b919082039182116118a457565b805f917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015613b21575b506d04ee2d6d415b85acef810000000080831015613b12575b50662386f26fc1000080831015613b03575b506305f5e10080831015613af4575b5061271080831015613ae5575b506064821015613ad5575b600a80921015613acb575b600190816021613a588287016118d1565b95860101905b613a6a575b5050505090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff849101917f30313233343536373839616263646566000000000000000000000000000000008282061a835304918215613ac657919082613a5e565b613a63565b9160010191613a47565b9190606460029104910191613a3c565b6004919392049101915f613a31565b6008919392049101915f613a24565b6010919392049101915f613a15565b6020919392049101915f613a03565b60409350810491505f6139ea565b907fffffffffffffffffffffffffffffffff00000000000000000000000000000000906040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b16825260148152613b8e81611136565b5190206fffffffffffffffffffffffffffffffff16911617613baf8161401c565b91565b81613bbf91939293613b2f565b90928373ffffffffffffffffffffffffffffffffffffffff809116925f918483526020936006855260409283852054613d2a57868552600686528385205516928315613ccf57600290613c3c613c36875f52600260205273ffffffffffffffffffffffffffffffffffffffff60405f205416151590565b15613d53565b613c6a613c36875f52600260205273ffffffffffffffffffffffffffffffffffffffff60405f205416151590565b8484526003815282842060018154019055858452528120827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4565b60649151907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b600484517f8cde2bfc000000000000000000000000000000000000000000000000000000008152fd5b15613d5a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152fd5b9173ffffffffffffffffffffffffffffffffffffffff8093169183613ddc84611268565b163303613fb957613dec83611268565b50613df683611268565b91613ead5f92858452602095600487528460409689888320917fffffffffffffffffffffffff000000000000000000000000000000000000000092838154169055169081835260038a528883207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff815401905583835260028a528883209081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a460068652848420549236916111cd565b9080613eb7613fe3565b868151910185f595861615613f5c5790613ed1839261401c565b9585825192019034905af1613ee46116b0565b5080613f52575b15613ef557505090565b6064925051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601560248201527f494e495449414c495a4154494f4e5f4641494c454400000000000000000000006044820152fd5b50823b1515613eeb565b6064858551907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601160248201527f4445504c4f594d454e545f4641494c45440000000000000000000000000000006044820152fd5b60046040517f4ca88867000000000000000000000000000000000000000000000000000000008152fd5b60405190613ff082611136565b601082527f67363d3d37363d34f03d5260086018f3000000000000000000000000000000006020830152565b614024613fe3565b602081519101206040519060208201927fff0000000000000000000000000000000000000000000000000000000000000084523060601b602184015260358301526055820152605581526080810181811067ffffffffffffffff8211176110ed577f010000000000000000000000000000000000000000000000000000000000000060b673ffffffffffffffffffffffffffffffffffffffff948360405284519020937fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060a08201957fd694000000000000000000000000000000000000000000000000000000000000875260601b1660a282015201526017815261412881611136565b519020169056fea2646970667358221220b51fa6703c61133b5bdbad06616ce776efabb58d75a4883b4b9195e1cce4988964736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/AddressToken.sol:AddressToken",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/AddressToken.sol:AddressToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/AddressToken.sol:AddressToken",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/AddressToken.sol:AddressToken",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/AddressToken.sol:AddressToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/AddressToken.sol:AddressToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2753,
        "contract": "contracts/AddressToken.sol:AddressToken",
        "label": "salts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}